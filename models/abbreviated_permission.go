// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AbbreviatedPermission Abbrevated information about permissions granted to a user.
//
// swagger:model abbreviated_permission
type AbbreviatedPermission struct {

	// id
	// Required: true
	ID *PermissionID `json:"id"`

	// permission level
	// Required: true
	PermissionLevel *PermissionLevel `json:"permission_level"`

	// The resource name.
	// Required: true
	// Min Length: 1
	ResourceName *string `json:"resource_name"`

	// The resource type name.
	// Required: true
	// Min Length: 1
	ResourceType *string `json:"resource_type"`
}

// Validate validates this abbreviated permission
func (m *AbbreviatedPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AbbreviatedPermission) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *AbbreviatedPermission) validatePermissionLevel(formats strfmt.Registry) error {

	if err := validate.Required("permission_level", "body", m.PermissionLevel); err != nil {
		return err
	}

	if err := validate.Required("permission_level", "body", m.PermissionLevel); err != nil {
		return err
	}

	if m.PermissionLevel != nil {
		if err := m.PermissionLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permission_level")
			}
			return err
		}
	}

	return nil
}

func (m *AbbreviatedPermission) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resource_name", "body", m.ResourceName); err != nil {
		return err
	}

	if err := validate.MinLength("resource_name", "body", *m.ResourceName, 1); err != nil {
		return err
	}

	return nil
}

func (m *AbbreviatedPermission) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	if err := validate.MinLength("resource_type", "body", *m.ResourceType, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this abbreviated permission based on the context it is used
func (m *AbbreviatedPermission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissionLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AbbreviatedPermission) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {
		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *AbbreviatedPermission) contextValidatePermissionLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.PermissionLevel != nil {
		if err := m.PermissionLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permission_level")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AbbreviatedPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AbbreviatedPermission) UnmarshalBinary(b []byte) error {
	var res AbbreviatedPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
