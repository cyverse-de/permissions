package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SubjectIn An incoming subject.
// swagger:model subject_in
type SubjectIn struct {

	// subject id
	// Required: true
	SubjectID ExternalSubjectID `json:"subject_id"`

	// subject type
	// Required: true
	SubjectType SubjectType `json:"subject_type"`
}

// Validate validates this subject in
func (m *SubjectIn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubjectIn) validateSubjectID(formats strfmt.Registry) error {

	if err := m.SubjectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subject_id")
		}
		return err
	}

	return nil
}

func (m *SubjectIn) validateSubjectType(formats strfmt.Registry) error {

	if err := m.SubjectType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subject_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubjectIn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubjectIn) UnmarshalBinary(b []byte) error {
	var res SubjectIn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
