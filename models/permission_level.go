// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PermissionLevel A permission level name.
//
// swagger:model permission_level
type PermissionLevel string

func NewPermissionLevel(value PermissionLevel) *PermissionLevel {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PermissionLevel.
func (m PermissionLevel) Pointer() *PermissionLevel {
	return &m
}

const (

	// PermissionLevelRead captures enum value "read"
	PermissionLevelRead PermissionLevel = "read"

	// PermissionLevelAdmin captures enum value "admin"
	PermissionLevelAdmin PermissionLevel = "admin"

	// PermissionLevelWrite captures enum value "write"
	PermissionLevelWrite PermissionLevel = "write"

	// PermissionLevelOwn captures enum value "own"
	PermissionLevelOwn PermissionLevel = "own"
)

// for schema
var permissionLevelEnum []interface{}

func init() {
	var res []PermissionLevel
	if err := json.Unmarshal([]byte(`["read","admin","write","own"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionLevelEnum = append(permissionLevelEnum, v)
	}
}

func (m PermissionLevel) validatePermissionLevelEnum(path, location string, value PermissionLevel) error {
	if err := validate.EnumCase(path, location, value, permissionLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this permission level
func (m PermissionLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePermissionLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this permission level based on context it is used
func (m PermissionLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
