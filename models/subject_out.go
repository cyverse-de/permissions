// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubjectOut An outgoing subject.
//
// swagger:model subject_out
type SubjectOut struct {

	// id
	// Required: true
	ID *InternalSubjectID `json:"id"`

	// subject id
	// Required: true
	SubjectID *ExternalSubjectID `json:"subject_id"`

	// subject source id
	// Required: true
	SubjectSourceID *SubjectSourceID `json:"subject_source_id"`

	// subject type
	// Required: true
	SubjectType *SubjectType `json:"subject_type"`
}

// Validate validates this subject out
func (m *SubjectOut) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubjectOut) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectOut) validateSubjectID(formats strfmt.Registry) error {

	if err := validate.Required("subject_id", "body", m.SubjectID); err != nil {
		return err
	}

	if err := validate.Required("subject_id", "body", m.SubjectID); err != nil {
		return err
	}

	if m.SubjectID != nil {
		if err := m.SubjectID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_id")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectOut) validateSubjectSourceID(formats strfmt.Registry) error {

	if err := validate.Required("subject_source_id", "body", m.SubjectSourceID); err != nil {
		return err
	}

	if err := validate.Required("subject_source_id", "body", m.SubjectSourceID); err != nil {
		return err
	}

	if m.SubjectSourceID != nil {
		if err := m.SubjectSourceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_source_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_source_id")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectOut) validateSubjectType(formats strfmt.Registry) error {

	if err := validate.Required("subject_type", "body", m.SubjectType); err != nil {
		return err
	}

	if err := validate.Required("subject_type", "body", m.SubjectType); err != nil {
		return err
	}

	if m.SubjectType != nil {
		if err := m.SubjectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subject out based on the context it is used
func (m *SubjectOut) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectSourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubjectOut) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {

		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectOut) contextValidateSubjectID(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectID != nil {

		if err := m.SubjectID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_id")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectOut) contextValidateSubjectSourceID(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectSourceID != nil {

		if err := m.SubjectSourceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_source_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_source_id")
			}
			return err
		}
	}

	return nil
}

func (m *SubjectOut) contextValidateSubjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectType != nil {

		if err := m.SubjectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubjectOut) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubjectOut) UnmarshalBinary(b []byte) error {
	var res SubjectOut
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
