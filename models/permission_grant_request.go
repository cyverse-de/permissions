// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PermissionGrantRequest Information for granting permission to a user.
//
// swagger:model permission_grant_request
type PermissionGrantRequest struct {

	// permission level
	// Required: true
	PermissionLevel *PermissionLevel `json:"permission_level"`

	// resource
	// Required: true
	Resource *ResourceIn `json:"resource"`

	// subject
	// Required: true
	Subject *SubjectIn `json:"subject"`
}

// Validate validates this permission grant request
func (m *PermissionGrantRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissionLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PermissionGrantRequest) validatePermissionLevel(formats strfmt.Registry) error {

	if err := validate.Required("permission_level", "body", m.PermissionLevel); err != nil {
		return err
	}

	if err := validate.Required("permission_level", "body", m.PermissionLevel); err != nil {
		return err
	}

	if m.PermissionLevel != nil {
		if err := m.PermissionLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permission_level")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permission_level")
			}
			return err
		}
	}

	return nil
}

func (m *PermissionGrantRequest) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *PermissionGrantRequest) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this permission grant request based on the context it is used
func (m *PermissionGrantRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePermissionLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PermissionGrantRequest) contextValidatePermissionLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.PermissionLevel != nil {

		if err := m.PermissionLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permission_level")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permission_level")
			}
			return err
		}
	}

	return nil
}

func (m *PermissionGrantRequest) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *PermissionGrantRequest) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PermissionGrantRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PermissionGrantRequest) UnmarshalBinary(b []byte) error {
	var res PermissionGrantRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
