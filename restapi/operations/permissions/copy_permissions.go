// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CopyPermissionsHandlerFunc turns a function with the right signature into a copy permissions handler
type CopyPermissionsHandlerFunc func(CopyPermissionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CopyPermissionsHandlerFunc) Handle(params CopyPermissionsParams) middleware.Responder {
	return fn(params)
}

// CopyPermissionsHandler interface for that can handle valid copy permissions params
type CopyPermissionsHandler interface {
	Handle(CopyPermissionsParams) middleware.Responder
}

// NewCopyPermissions creates a new http.Handler for the copy permissions operation
func NewCopyPermissions(ctx *middleware.Context, handler CopyPermissionsHandler) *CopyPermissions {
	return &CopyPermissions{Context: ctx, Handler: handler}
}

/*
	CopyPermissions swagger:route POST /permissions/subjects/{subject_type}/{subject_id}/copy permissions copyPermissions

# Copy Permissions Between Subjects

Copies all permissions that have been granted to one subject to one or more other subjects. Only permissions that are assigned directly to the source subject are copied. Permissions that are granted to groups that the source subject belongs to are not copied.
*/
type CopyPermissions struct {
	Context *middleware.Context
	Handler CopyPermissionsHandler
}

func (o *CopyPermissions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCopyPermissionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
