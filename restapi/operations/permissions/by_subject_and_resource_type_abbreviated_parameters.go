// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewBySubjectAndResourceTypeAbbreviatedParams creates a new BySubjectAndResourceTypeAbbreviatedParams object
// with the default values initialized.
func NewBySubjectAndResourceTypeAbbreviatedParams() BySubjectAndResourceTypeAbbreviatedParams {

	var (
		// initialize parameters with default values

		lookupDefault = bool(false)
	)

	return BySubjectAndResourceTypeAbbreviatedParams{
		Lookup: &lookupDefault,
	}
}

// BySubjectAndResourceTypeAbbreviatedParams contains all the bound params for the by subject and resource type abbreviated operation
// typically these are obtained from a http.Request
//
// swagger:parameters bySubjectAndResourceTypeAbbreviated
type BySubjectAndResourceTypeAbbreviatedParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*True if a permission lookup should be performed. A permission lookup differs from standard permisison retrieval in two ways. First, only the most permissive permission level available to the subject is returned for any given resource. Second, if the subject happens to be a user then permissions granted to groups that the user belongs to are also included in the results. This parameter is optional and defaults to False.
	  In: query
	  Default: false
	*/
	Lookup *bool
	/*The minimum permission level required to qualify for the result set. All permission levels qualify by default.
	  In: query
	*/
	MinLevel *string
	/*The resource type name.
	  Required: true
	  In: path
	*/
	ResourceType string
	/*The external subject identifier.
	  Required: true
	  In: path
	*/
	SubjectID string
	/*The subject type name.
	  Required: true
	  In: path
	*/
	SubjectType string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewBySubjectAndResourceTypeAbbreviatedParams() beforehand.
func (o *BySubjectAndResourceTypeAbbreviatedParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLookup, qhkLookup, _ := qs.GetOK("lookup")
	if err := o.bindLookup(qLookup, qhkLookup, route.Formats); err != nil {
		res = append(res, err)
	}

	qMinLevel, qhkMinLevel, _ := qs.GetOK("min_level")
	if err := o.bindMinLevel(qMinLevel, qhkMinLevel, route.Formats); err != nil {
		res = append(res, err)
	}

	rResourceType, rhkResourceType, _ := route.Params.GetOK("resource_type")
	if err := o.bindResourceType(rResourceType, rhkResourceType, route.Formats); err != nil {
		res = append(res, err)
	}

	rSubjectID, rhkSubjectID, _ := route.Params.GetOK("subject_id")
	if err := o.bindSubjectID(rSubjectID, rhkSubjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	rSubjectType, rhkSubjectType, _ := route.Params.GetOK("subject_type")
	if err := o.bindSubjectType(rSubjectType, rhkSubjectType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLookup binds and validates parameter Lookup from query.
func (o *BySubjectAndResourceTypeAbbreviatedParams) bindLookup(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewBySubjectAndResourceTypeAbbreviatedParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("lookup", "query", "bool", raw)
	}
	o.Lookup = &value

	return nil
}

// bindMinLevel binds and validates parameter MinLevel from query.
func (o *BySubjectAndResourceTypeAbbreviatedParams) bindMinLevel(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.MinLevel = &raw

	if err := o.validateMinLevel(formats); err != nil {
		return err
	}

	return nil
}

// validateMinLevel carries on validations for parameter MinLevel
func (o *BySubjectAndResourceTypeAbbreviatedParams) validateMinLevel(formats strfmt.Registry) error {

	if err := validate.EnumCase("min_level", "query", *o.MinLevel, []interface{}{"read", "admin", "write", "own"}, true); err != nil {
		return err
	}

	return nil
}

// bindResourceType binds and validates parameter ResourceType from path.
func (o *BySubjectAndResourceTypeAbbreviatedParams) bindResourceType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ResourceType = raw

	return nil
}

// bindSubjectID binds and validates parameter SubjectID from path.
func (o *BySubjectAndResourceTypeAbbreviatedParams) bindSubjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.SubjectID = raw

	return nil
}

// bindSubjectType binds and validates parameter SubjectType from path.
func (o *BySubjectAndResourceTypeAbbreviatedParams) bindSubjectType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.SubjectType = raw

	if err := o.validateSubjectType(formats); err != nil {
		return err
	}

	return nil
}

// validateSubjectType carries on validations for parameter SubjectType
func (o *BySubjectAndResourceTypeAbbreviatedParams) validateSubjectType(formats strfmt.Registry) error {

	if err := validate.EnumCase("subject_type", "path", o.SubjectType, []interface{}{"user", "group"}, true); err != nil {
		return err
	}

	return nil
}
