package resource_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteResourceTypeByNameHandlerFunc turns a function with the right signature into a delete resource type by name handler
type DeleteResourceTypeByNameHandlerFunc func(DeleteResourceTypeByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteResourceTypeByNameHandlerFunc) Handle(params DeleteResourceTypeByNameParams) middleware.Responder {
	return fn(params)
}

// DeleteResourceTypeByNameHandler interface for that can handle valid delete resource type by name params
type DeleteResourceTypeByNameHandler interface {
	Handle(DeleteResourceTypeByNameParams) middleware.Responder
}

// NewDeleteResourceTypeByName creates a new http.Handler for the delete resource type by name operation
func NewDeleteResourceTypeByName(ctx *middleware.Context, handler DeleteResourceTypeByNameHandler) *DeleteResourceTypeByName {
	return &DeleteResourceTypeByName{Context: ctx, Handler: handler}
}

/*DeleteResourceTypeByName swagger:route DELETE /resource_types resource_types deleteResourceTypeByName

Delete a Resource Type by Name

Deletes the resource type with the given name.

*/
type DeleteResourceTypeByName struct {
	Context *middleware.Context
	Handler DeleteResourceTypeByNameHandler
}

func (o *DeleteResourceTypeByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteResourceTypeByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
