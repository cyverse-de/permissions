package subjects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewDeleteSubjectByExternalIDParams creates a new DeleteSubjectByExternalIDParams object
// with the default values initialized.
func NewDeleteSubjectByExternalIDParams() DeleteSubjectByExternalIDParams {
	var ()
	return DeleteSubjectByExternalIDParams{}
}

// DeleteSubjectByExternalIDParams contains all the bound params for the delete subject by external Id operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteSubjectByExternalId
type DeleteSubjectByExternalIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The external subject identifier.
	  Required: true
	  In: query
	*/
	SubjectID string
	/*The subject type.
	  Required: true
	  In: query
	*/
	SubjectType string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *DeleteSubjectByExternalIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := httpkit.Values(r.URL.Query())

	qSubjectID, qhkSubjectID, _ := qs.GetOK("subject_id")
	if err := o.bindSubjectID(qSubjectID, qhkSubjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSubjectType, qhkSubjectType, _ := qs.GetOK("subject_type")
	if err := o.bindSubjectType(qSubjectType, qhkSubjectType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSubjectByExternalIDParams) bindSubjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("subject_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("subject_id", "query", raw); err != nil {
		return err
	}

	o.SubjectID = raw

	return nil
}

func (o *DeleteSubjectByExternalIDParams) bindSubjectType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("subject_type", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("subject_type", "query", raw); err != nil {
		return err
	}

	o.SubjectType = raw

	if err := o.validateSubjectType(formats); err != nil {
		return err
	}

	return nil
}

func (o *DeleteSubjectByExternalIDParams) validateSubjectType(formats strfmt.Registry) error {

	if err := validate.Enum("subject_type", "query", o.SubjectType, []interface{}{"user", "group"}); err != nil {
		return err
	}

	return nil
}
