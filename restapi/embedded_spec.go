package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manages Permissions for the CyVerse Discovery Environment and related applications.",
    "title": "Permissions Service",
    "version": "5.2.8.0"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Displays general information about the service and can be used to determine whether or not the service is running.",
        "tags": [
          "status"
        ],
        "summary": "Service Status Information",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/service_info"
            }
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "description": "Lists all permissions in the permission database. The total number of permissions for all resources is likely to be quite large, so callers should be prepared to handle the response body. If this endpoint is used more frequently than anticipated, limit and offset parameters will be added for paging later.",
        "tags": [
          "permissions"
        ],
        "summary": "List Permissions",
        "operationId": "listPermissions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/permission_list"
            }
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "post": {
        "description": "Grants permission to access a resource to a subject. If the subject already has permission to access the resource then the permission level will be updated (assuming the new permission level is different from the existing permission level). Neither the resource nor the subject needs to be registered in the database before this endpoint is called; they will be added to the database if necessary. This endpoint will return an error response if the subject ID is already in use and associated with a different subject type. It will also return an error if either the specified resource type or permission level does not exist.",
        "tags": [
          "permissions"
        ],
        "summary": "Grant Permission to a Resource",
        "operationId": "grantPermission",
        "parameters": [
          {
            "description": "Information about the permission to add.",
            "name": "permission_grant_request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/permission_grant_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/permission"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      }
    },
    "/permissions/resources/{resource_type}/{resource_name}": {
      "get": {
        "description": "Lists all of the permissions associated with a resource.",
        "tags": [
          "permissions"
        ],
        "summary": "List Resource Permissions",
        "operationId": "listResourcePermissions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/permission_list"
            }
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The resource type name.",
          "name": "resource_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The resource name.",
          "name": "resource_name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/permissions/resources/{resource_type}/{resource_name}/subjects/{subject_type}/{subject_id}": {
      "put": {
        "description": "Grants permission to access a resource to a subject. If the subject already has permission to access the resource then the permission level will be updated (assuming the new permission level is different from the existing permission level). Neither the resource nor the subject needs to be registered in the database before this endpoint is called; they will be added to the database if necessary. This endpoint will return an error response if the subject ID is already in use and associated with a different subject type. It will also return an error if either the specified resource type or permission level does not exist.",
        "tags": [
          "permissions"
        ],
        "summary": "Grant Permission to a Resource",
        "operationId": "putPermission",
        "parameters": [
          {
            "description": "The permission level to assign.",
            "name": "permission",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/permission_put_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/permission"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Removes a permission entry from the database. This endpoint will return an error status if the resource type, resource, subject or the permission itself does not exist.",
        "tags": [
          "permissions"
        ],
        "summary": "Revoke Permission to a Resource",
        "operationId": "revokePermission",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The resource type name.",
          "name": "resource_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The resource name.",
          "name": "resource_name",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "user",
            "group"
          ],
          "type": "string",
          "description": "The subject type name.",
          "name": "subject_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The external subject identifier.",
          "name": "subject_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/permissions/subjects/{subject_type}/{subject_id}": {
      "get": {
        "description": "Looks up all permissions granted to a subject. If lookup mode is enabled and the subject is a user, the most lenient permissions granted to the subject or any groups the subject belongs to will be listed. If lookup mode is not enabled or the subject is a group then only permissions assigned directly to the subject will be listed. This endpoint will return an error status if the subject ID is in use and associated with a different subject type.",
        "tags": [
          "permissions"
        ],
        "summary": "Look Up by Subject",
        "operationId": "bySubject",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/permission_list"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "user",
            "group"
          ],
          "type": "string",
          "description": "The subject type name.",
          "name": "subject_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The external subject identifier.",
          "name": "subject_id",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "description": "True if a permission lookup should be performed. A permission lookup differs from standard permisison retrieval in two ways. First, only the most permissive permission level available to the subject is returned for any given resource. Second, if the subject happens to be a user then permissions granted to groups that the user belongs to are also included in the results. This parameter is optional and defaults to False.",
          "name": "lookup",
          "in": "query"
        },
        {
          "enum": [
            "read",
            "admin",
            "write",
            "own"
          ],
          "type": "string",
          "description": "The minimum permission level required to qualify for the result set. All permission levels qualify by default.",
          "name": "min_level",
          "in": "query"
        }
      ]
    },
    "/permissions/subjects/{subject_type}/{subject_id}/{resource_type}": {
      "get": {
        "description": "Looks up all permissions granted to a subject for resources of the given type. If lookup mode is enabled and the subject is a user, the most lenient permissions granted to the subject or any groups the subject belongs to will be listed. If lookup mode is not enabled or the subject is a group then only permissions assigned directly to the subject will be listed. This endpoint will return an error status if the subject ID is in use and associated with a different subject type.",
        "tags": [
          "permissions"
        ],
        "summary": "Look Up by Subject and Resource Type",
        "operationId": "bySubjectAndResourceType",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/permission_list"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "user",
            "group"
          ],
          "type": "string",
          "description": "The subject type name.",
          "name": "subject_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The external subject identifier.",
          "name": "subject_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The resource type name.",
          "name": "resource_type",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "description": "True if a permission lookup should be performed. A permission lookup differs from standard permisison retrieval in two ways. First, only the most permissive permission level available to the subject is returned for any given resource. Second, if the subject happens to be a user then permissions granted to groups that the user belongs to are also included in the results. This parameter is optional and defaults to False.",
          "name": "lookup",
          "in": "query"
        },
        {
          "enum": [
            "read",
            "admin",
            "write",
            "own"
          ],
          "type": "string",
          "description": "The minimum permission level required to qualify for the result set. All permission levels qualify by default.",
          "name": "min_level",
          "in": "query"
        }
      ]
    },
    "/permissions/subjects/{subject_type}/{subject_id}/{resource_type}/{resource_name}": {
      "get": {
        "description": "Looks up  permissions granted to a subject for a resource. If lookup mode is enabled and the subject is a user, the most lenient permission granted to the subject or any groups the subject belongs to will be listed. If lookup mode is not enabled or the subject is a group then only permissions assigned directly to the subject will be listed. This endpoint will currently list at most one permission, but the permission list format was chosen in favor of returning a 404 status if a permission does not exist because this endpoint may be called frequently when no corresponding permissions exist. This endpoint will return an error status if the subject ID is in use and associated with a different subject type.",
        "tags": [
          "permissions"
        ],
        "summary": "Look Up by Subject and Resource",
        "operationId": "bySubjectAndResource",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/permission_list"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "user",
            "group"
          ],
          "type": "string",
          "description": "The subject type name.",
          "name": "subject_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The external subject identifier.",
          "name": "subject_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The resource type name.",
          "name": "resource_type",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "The resource name.",
          "name": "resource_name",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "default": false,
          "description": "True if a permission lookup should be performed. A permission lookup differs from standard permisison retrieval in two ways. First, only the most permissive permission level available to the subject is returned for any given resource. Second, if the subject happens to be a user then permissions granted to groups that the user belongs to are also included in the results. This parameter is optional and defaults to False.",
          "name": "lookup",
          "in": "query"
        },
        {
          "enum": [
            "read",
            "admin",
            "write",
            "own"
          ],
          "type": "string",
          "description": "The minimum permission level required to qualify for the result set. All permission levels qualify by default.",
          "name": "min_level",
          "in": "query"
        }
      ]
    },
    "/resource_types": {
      "get": {
        "description": "Lists resource types known to the permissions service. A resource type represents a class of resources to which permissions may be applied. For example, the Discovery environment has apps collectively defined as a single resource type in the permissions service.",
        "tags": [
          "resource_types"
        ],
        "summary": "List Resource Types",
        "parameters": [
          {
            "type": "string",
            "description": "The resource type name to search for.",
            "name": "resource_type_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/resource_types_out"
            }
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "post": {
        "description": "Adds a resource type to the list of available resource types. The name of the resource type must be unique.",
        "tags": [
          "resource_types"
        ],
        "summary": "Add a Resource Type",
        "parameters": [
          {
            "description": "The resource type to add.",
            "name": "resource_type_in",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resource_type_in"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/resource_type_out"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Deletes the resource type with the given name.",
        "tags": [
          "resource_types"
        ],
        "summary": "Delete a Resource Type by Name",
        "operationId": "deleteResourceTypeByName",
        "parameters": [
          {
            "type": "string",
            "description": "The resource type name to search for.",
            "name": "resource_type_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      }
    },
    "/resource_types/{id}": {
      "put": {
        "description": "Updates the name or description of a resource type. The new name of the resource type must be unique if one is provided.",
        "tags": [
          "resource_types"
        ],
        "summary": "Update a Resource Type",
        "parameters": [
          {
            "description": "The new name and description of the resource type.",
            "name": "resource_type_in",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resource_type_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/resource_type_out"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Removes a resource type from the database. A resource type may only be removed if there are no resources associated with it.",
        "tags": [
          "resource_types"
        ],
        "summary": "Delete a Resource Type",
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The resource type ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/resources": {
      "get": {
        "description": "Lists resources in the database. A resource is a single item to which permissions may be applied. For example The Discovery Environment app, Word Count, would be defined as a resource in the permissions service.",
        "tags": [
          "resources"
        ],
        "summary": "List Resources",
        "operationId": "listResources",
        "parameters": [
          {
            "type": "string",
            "description": "The resource type name to search for.",
            "name": "resource_type_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The resource name to search for.",
            "name": "resource_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/resources_out"
            }
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "post": {
        "description": "Adds a resource to the database. A resource is a single item to which permissions may be applied. For example The Discovery Environment app, Word Count, would be defined as a resource in the permissions service.",
        "tags": [
          "resources"
        ],
        "summary": "Add a Resource",
        "operationId": "addResource",
        "parameters": [
          {
            "description": "The new resource to add.",
            "name": "resource_in",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resource_in"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/resource_out"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Removes a resource from the database. A resource is a single item to which permissions may be applied. For example. The Discovery Environment app, Word Count, would be defined as a resource in the permissions service.",
        "tags": [
          "resources"
        ],
        "summary": "Delete Resources by Name",
        "operationId": "deleteResourceByName",
        "parameters": [
          {
            "type": "string",
            "description": "The resource type name to search for.",
            "name": "resource_type_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The resource name to search for.",
            "name": "resource_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      }
    },
    "/resources/{id}": {
      "put": {
        "description": "Updates a resource in the database.",
        "tags": [
          "resources"
        ],
        "summary": "Update a Resource",
        "operationId": "updateResource",
        "parameters": [
          {
            "description": "The updated resource information.",
            "name": "resource_update",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resource_update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/resource_out"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Removes a resource from the database.",
        "tags": [
          "resources"
        ],
        "summary": "Delete a Resource",
        "operationId": "deleteResource",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The resource ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/subjects": {
      "get": {
        "description": "Lists subjects (entities to which permissions may be gratned) that exist in the database.",
        "tags": [
          "subjects"
        ],
        "summary": "List Subjects",
        "operationId": "listSubjects",
        "parameters": [
          {
            "type": "string",
            "description": "The external subject identifier.",
            "name": "subject_id",
            "in": "query"
          },
          {
            "enum": [
              "user",
              "group"
            ],
            "type": "string",
            "description": "The subject type.",
            "name": "subject_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/subjects_out"
            }
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "post": {
        "description": "Adds a subject (an entity to which permissions may be granted) to the database. For full use of the permissions service, the subject should be present in Grouper and have the same subject ID in Grouper and the permissions service.",
        "tags": [
          "subjects"
        ],
        "summary": "Add a Subject",
        "operationId": "addSubject",
        "parameters": [
          {
            "description": "The new subject to add.",
            "name": "subject_in",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subject_in"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/subject_out"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Removes subjects (entities to which permissions may be gratned) from the database.",
        "tags": [
          "subjects"
        ],
        "summary": "Delete Subjects by External ID",
        "operationId": "deleteSubjectByExternalId",
        "parameters": [
          {
            "type": "string",
            "description": "The external subject identifier.",
            "name": "subject_id",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "user",
              "group"
            ],
            "type": "string",
            "description": "The subject type.",
            "name": "subject_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      }
    },
    "/subjects/{id}": {
      "put": {
        "description": "Updates a subject in the database. For full use of the permissions service, the subject should be present in Grouper and have the same subject ID in Grouper and the permissions service.",
        "tags": [
          "subjects"
        ],
        "summary": "Update a Subject",
        "operationId": "updateSubject",
        "parameters": [
          {
            "description": "The new subject information.",
            "name": "subject_in",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subject_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/subject_out"
            }
          },
          "400": {
            "$ref": "#/responses/bad_request"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "delete": {
        "description": "Deletes a subject from the database.",
        "tags": [
          "subjects"
        ],
        "summary": "Delete a Subject",
        "operationId": "deleteSubject",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "$ref": "#/responses/not_found"
          },
          "500": {
            "$ref": "#/responses/internal_server_error"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The subject ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error_out": {
      "description": "The standard format for an error response body.",
      "type": "object",
      "required": [
        "reason"
      ],
      "properties": {
        "reason": {
          "description": "The reason for the error.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "external_subject_id": {
      "description": "The external subject identifier.",
      "type": "string",
      "maxLength": 64,
      "minLength": 1
    },
    "internal_subject_id": {
      "description": "The internal subject identifier.",
      "type": "string",
      "maxLength": 36,
      "minLength": 36
    },
    "permission": {
      "description": "Information about permissions granted to a user.",
      "type": "object",
      "required": [
        "id",
        "subject",
        "resource",
        "permission_level"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/permission_id"
        },
        "permission_level": {
          "$ref": "#/definitions/permission_level"
        },
        "resource": {
          "$ref": "#/definitions/resource_out"
        },
        "subject": {
          "$ref": "#/definitions/subject_out"
        }
      }
    },
    "permission_grant_request": {
      "description": "Information for granting permission to a user.",
      "type": "object",
      "required": [
        "subject",
        "resource",
        "permission_level"
      ],
      "properties": {
        "permission_level": {
          "$ref": "#/definitions/permission_level"
        },
        "resource": {
          "$ref": "#/definitions/resource_in"
        },
        "subject": {
          "$ref": "#/definitions/subject_in"
        }
      }
    },
    "permission_id": {
      "description": "The internal permission identifier.",
      "type": "string",
      "maxLength": 36,
      "minLength": 36
    },
    "permission_level": {
      "description": "A permission level name.",
      "type": "string",
      "enum": [
        "read",
        "admin",
        "write",
        "own"
      ]
    },
    "permission_list": {
      "description": "A list of matching permissions.",
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "description": "The list of permissions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/permission"
          }
        }
      }
    },
    "permission_put_request": {
      "description": "Specifies the permission level to assign.",
      "type": "object",
      "required": [
        "permission_level"
      ],
      "properties": {
        "permission_level": {
          "$ref": "#/definitions/permission_level"
        }
      }
    },
    "resource_in": {
      "description": "An incoming resource.",
      "type": "object",
      "required": [
        "name",
        "resource_type"
      ],
      "properties": {
        "name": {
          "description": "The resource name.",
          "type": "string",
          "minLength": 1
        },
        "resource_type": {
          "description": "The resource type name.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "resource_out": {
      "description": "An outgoing resource.",
      "type": "object",
      "required": [
        "id",
        "name",
        "resource_type"
      ],
      "properties": {
        "id": {
          "description": "The resource identifier.",
          "type": "string",
          "maxLength": 36,
          "minLength": 36
        },
        "name": {
          "description": "The resource name.",
          "type": "string",
          "minLength": 1
        },
        "resource_type": {
          "description": "The resource type name.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "resource_type_in": {
      "description": "An incoming resource type.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "A brief description of the resource type.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource type.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "resource_type_out": {
      "description": "An outgoing resource type.",
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "description": {
          "description": "A brief description of the resource type.",
          "type": "string"
        },
        "id": {
          "description": "The resource type identifier.",
          "type": "string",
          "maxLength": 36,
          "minLength": 36
        },
        "name": {
          "description": "The name of the resource type.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "resource_types_out": {
      "description": "A list of resource types.",
      "type": "object",
      "required": [
        "resource_types"
      ],
      "properties": {
        "resource_types": {
          "description": "The list of resource types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/resource_type_out"
          }
        }
      }
    },
    "resource_update": {
      "description": "A modification to a resource.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The new resource name.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "resources_out": {
      "description": "A list of resources.",
      "type": "object",
      "required": [
        "resources"
      ],
      "properties": {
        "resources": {
          "description": "The list of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/resource_out"
          }
        }
      }
    },
    "service_info": {
      "type": "object",
      "required": [
        "description",
        "service",
        "version"
      ],
      "properties": {
        "description": {
          "description": "A brief description of the service.",
          "type": "string",
          "minLength": 1
        },
        "service": {
          "description": "The name of the service.",
          "type": "string",
          "minLength": 1
        },
        "version": {
          "description": "The service's version number.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "subject_in": {
      "description": "An incoming subject.",
      "type": "object",
      "required": [
        "subject_id",
        "subject_type"
      ],
      "properties": {
        "subject_id": {
          "$ref": "#/definitions/external_subject_id"
        },
        "subject_type": {
          "$ref": "#/definitions/subject_type"
        }
      }
    },
    "subject_out": {
      "description": "An outgoing subject.",
      "type": "object",
      "required": [
        "id",
        "subject_id",
        "subject_type",
        "subject_source_id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/internal_subject_id"
        },
        "subject_id": {
          "$ref": "#/definitions/external_subject_id"
        },
        "subject_source_id": {
          "$ref": "#/definitions/subject_source_id"
        },
        "subject_type": {
          "$ref": "#/definitions/subject_type"
        }
      }
    },
    "subject_source_id": {
      "description": "The subject source ID.",
      "type": "string",
      "maxLength": 255,
      "minLength": 1
    },
    "subject_type": {
      "description": "The subject type.",
      "type": "string",
      "enum": [
        "user",
        "group"
      ]
    },
    "subjects_out": {
      "description": "A list of subjects.",
      "type": "object",
      "required": [
        "subjects"
      ],
      "properties": {
        "subjects": {
          "description": "The list of subjects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subject_out"
          }
        }
      }
    }
  },
  "responses": {
    "bad_request": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/error_out"
      }
    },
    "internal_server_error": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/error_out"
      }
    },
    "not_found": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/error_out"
      }
    }
  }
}`))
}
